Phase:	ClauseSplit
Input:  Token Split Sentence
Options: control = all


MACRO: QUOTE
(
   {Token.kind=="punctuation",Token.string == "\""} |
   (
      {Token.kind=="symbol",Token.string == "`"}
      ({Token.kind=="symbol",Token.string == "`"})?
   ) |
   (
      {Token.kind=="punctuation",Token.string == "'"}
      ({Token.kind=="punctuation",Token.string == "'"})?
   ) |
   {Token.category == POS}
)

MACRO: TWO_TOKEN_WINDOW
(
	(
		{Token.category =~ "^JJ|IN|RB|WD|WR|WP|EX"}
	)[0, 2]
)


MACRO: NP
(
	(QUOTE)?
	(
		( {Token.category =~ "^PRP"} )
		|
		(
			({Token.category == DT})?
			({Token.category =~ "^RB"})?
			({Token.category =~ "^JJ"})[0, 4]
			({Token.category =~ "^NN|CD"})[1, 4]
		)
		|
		(
			{Token.category == DT}
			({Token.category =~ "^RB"})?
			({Token.category =~ "^JJ|CD|VBN"})
		)
		|
		( {Token.category == DT} {Token.category =~ "^WD|WR|WP"})
	)
	(QUOTE)?
)


MACRO: NNP
(
	(QUOTE)?
	(
		( {Token.category =~ "^PRP"} )
		|
		(
			({Token.category == DT})?
			({Token.category =~ "^RB"})?
			({Token.category =~ "^JJ"})[0, 4]
			({Token.category =~ "^NNP"})[1, 4]
		)
		|
		( {Token.category == DT} {Token.category =~ "^WD|WR|WP"} )
	)
	(QUOTE)?
)


MACRO: PP
(
	(NP)
	{Token.category == IN}
	((NP) | (NNP))
)


MACRO: VG
(
	({Token.category =~ "^RB"})?
	({Token.string ==~ "(?i)to"})?
	({Token.category =~ "^RB"})?
	(
		({Token.category ==~ "VB|VBD|VBN|VBP|VBZ"}) |
		(
			{Token.category =~ "^MD"}
			{Token.category ==~ "VB|VBD|VBN|VBP|VBZ"}
		)
	)
	({Token.category == RP})?
)


MACRO: VB
(
	({Token.category =~ "^RB"})?
	({Token.string ==~ "(?i)to"})?
	({Token.category =~ "^RB"})?
	(
		({Token.category =~ "^VB"}) |
		(
			{Token.category =~ "^MD"}
			{Token.category =~ "^VB"}
		)
	)
	({Token.category == RP})?
)


Rule: MatchParentheticalClause
(
	{Token.string ==~ "[\\(\\[]"}
	({Token.category =~ "^JJ|IN|TO|CC|RB|VB|WD|WR|WP|EX|NN|PRP|DT|CD", !Token.string ==~ "[\\)\\]]", !Split})[4,50]
	{Token.string ==~ "[\\)\\]]"}
):c
-->
:c.Clause={type=parenthetical}


Rule: MatchClauseSplit1
(
	(
		{Token.string ==~ ","}
	):c
	({Token.category ==~ "CC"})?
	(VB)?
	(TWO_TOKEN_WINDOW)
	(NP|PP)[1, 2]
	({Token.category ==~ "IN|CC|RB"})?
	(VB)
)
-->
:c.ClauseSplit={type=commanolist}



Rule: MatchClauseSplit1a
(
	(
		{Token.string ==~ ","}
	):c
	{Token.category ==~ "CC"}
	(VB)[1, 3]
	(TWO_TOKEN_WINDOW)
	(NP|PP)[1, 2]
)
-->
:c.ClauseSplit={type=commanolist}


Rule: MatchClauseSplit1b
(
	(
		{Token.string ==~ ","}
	):c
	(VB)[1, 3]
	(TWO_TOKEN_WINDOW)
	(NP|PP)[1, 2]
	{Token.category ==~ "RB|JJ|IN"}
)
-->
:c.ClauseSplit={type=commanolist}



Rule: MatchClauseSplit1c
(
	(
		{Token.string ==~ ","}
	):c
	{Token.category ==~ "TO|MD"}
	(TWO_TOKEN_WINDOW)
	{Token.category =~ "^VB|WP|WD"}
)
-->
:c.ClauseSplit={type=commanolist}



Rule: MatchClauseSplit1d
(
	(
		{Token.string ==~ ","}
	):c
	{Token.category ==~ "TO"}
	(TWO_TOKEN_WINDOW)
	{Token.category =~ "^WP|WD"}
)
-->
:c.ClauseSplit={type=commanolist}



Rule: MatchClauseSplit1e
(
	(
		{Token.string ==~ ","}
	):c
	(VG)
)
-->
:c.ClauseSplit={type=commanolist}




Rule: MatchNonCCSplit
(
	{Token.category == TO}
	(VB)
	{Token.category ==~ "CC"}
	(VB)
)
-->
{}


Rule: MatchClauseSplit2
(
	({Token.category ==~ "CC"}):c
	(TWO_TOKEN_WINDOW)
	(NP|PP)[1, 2]
	({Token.category ==~ "IN"})?
	(VG)
)
-->
:c.ClauseSplit={type=cc}



Rule: MatchClauseSplit2a
(
	({Token.category ==~ "CC"}):c
	(TWO_TOKEN_WINDOW)
	(
		(VB)
		({Token.category ==~ "IN"})?
	)[1, 3]
	(TWO_TOKEN_WINDOW)
	(NP|PP)[1, 2]
)
-->
:c.ClauseSplit={type=cc}



Rule: MatchClauseSplit2aa
(
	({Token.category ==~ "CC"}):c
	(TWO_TOKEN_WINDOW)
	(
		{Token.category ==~ "JJ"}
		{Token.category ==~ "IN|DT"}
	)[1, 3]
	(TWO_TOKEN_WINDOW)
	(NP|PP)[1, 2]
)
-->
:c.ClauseSplit={type=cc}



Rule: MatchClauseSplit2b
(
	({Token.category ==~ "CC"}):c
	(TWO_TOKEN_WINDOW)
	{Token.category ==~ "IN|RB|JJ"}
	(VB)
)
-->
:c.ClauseSplit={type=cc}


Rule: MatchClauseSplit2c
(
	({Token.string ==~ "(?i)but|because|although|however"}):c
)
-->
:c.ClauseSplit={type=cc}




Rule: MatchClauseSplit3
(
	{Token.category !~ "^NN|CD|RB|IN"}
	({Token.category ==~ "IN"})[1,2]:c
	(NNP)[1, 2]
	({Token.category ==~ "IN"})?
	(VG)
)
-->
:c.ClauseSplit={type=pp}


Rule: MatchClauseSplit3a
(
	({Token.string ==~ "(?i)as|since|before|during|after|while"}):c
	(NNP)[1, 2]
	({Token.category ==~ "IN"})?
	(VG)
)
-->
:c.ClauseSplit={type=pp}




Rule: MatchClauseSplit4
(
	(
		{Token.string ==~ ","}
	):c
	{Token.category ==~ "IN|RB"}
)
-->
:c.ClauseSplit={type=commafor}


Rule: MatchClauseSplit4a
(
	{Token.category ==~ "IN|RB"}
	(
		{Token.string ==~ ","}
	):c
)
-->
:c.ClauseSplit={type=forcomma}



Rule: MatchClauseSplit5
(
	{Token.string ==~ "[;:]"} |
	{Token.kind == punctuation, Token.subkind == dashpunct}
):c
{!Token.kind == punctuation}
-->
:c.ClauseSplit={type=punct}







Rule: MatchClauseSplit6
(
	({Token.category ==~ "IN|TO"}):c
	{Token.category =~ "^WD|WR|WP"}
)
-->
:c.ClauseSplit={type=wh}



Rule: MatchClauseSplit6a
(
	(NP)
	({Token.category =~ "^WD|WR|WP"}):c	
	(NP)
)
-->
:c.ClauseSplit={type=wh}


Rule: MatchClauseSplit6aa
(
	({Token.category =~ "^WD|WR|WP"}):c	
	(VG)
)
-->
:c.ClauseSplit={type=wh}



Rule: MatchClauseSplit6b
(
	(VG)
	({Token.category =~ "^IN|WD", Token.string ==~ "(?i)that|which"}):c
	{Token.kind == word}
)
-->
:c.ClauseSplit={type=wh}


Rule: MatchClauseSplit6c
(
	(VB)
	({Token.category =~ "^IN|WD", Token.string ==~ "(?i)which"}):c
	{Token.kind == word}
)
-->
:c.ClauseSplit={type=wh}



Rule: MatchClauseSplit7
{Split}
(
	({Token.category =~ "^RB"})[1, 3]:c
	(VG)?
	(TWO_TOKEN_WINDOW)
	(NP|PP)[1, 2]
	(TWO_TOKEN_WINDOW)
	(VG)
)
-->
:c.ClauseSplit={type=rb}


